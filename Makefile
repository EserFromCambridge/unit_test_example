# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

###############################################################################

export SRCBASE := $(shell pwd)

# Boiler-plate
###############################################################################
# Project settings

GCC_BIN := ~/opt/gcc-arm-none-eabi-6-2017-q2-update/bin/
MBED_OS := /submodules/mbedOS
PROJECT := bin/project

# Project settings
###############################################################################
# Objects and Paths

OBJECTS = $(SRCBASE)/main.o

# Application Layer
OBJECTS += $(SRCBASE)/application/example.o

# Device Layer

# Driver Layer


# Add in generic objects
GENERIC_SRC = $(wildcard $(SRCBASE)/src/*.c)
GENERIC_SRC += $(wildcard $(SRCBASE)/src/*.cpp)
GENERIC_SRC += $(wildcard $(SRCBASE)/threads/*.cpp)
GENERIC_OBJECTS = $(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(GENERIC_SRC)))
OBJECTS += $(GENERIC_OBJECTS)

# Export all objects for the sub makefiles.
export OBJECTS
INCLUDE_PATHS += -I$(SRCBASE)/
INCLUDE_PATHS += -I$(SRCBASE)/.
INCLUDE_PATHS += -I$(SRCBASE)/application
INCLUDE_PATHS += -I$(SRCBASE)/device
INCLUDE_PATHS += -I$(SRCBASE)/driver

# Mbed Build Targets
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/TARGET_MCU_K64F/TARGET_FRDM/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/api/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/TARGET_MCU_K64F/device
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/BUILD/libraries/mbedOS/K64F/GCC_ARM/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/BUILD/libraries/mbedOS/K64F/GCC_ARM/targets/TARGET_Freescale/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/cmsis/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/hal/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/platform/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/drivers/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/events/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/TARGET_MCU_K64F/drivers
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/features/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/features/filesystem/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/features/filesystem/fat/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/features/filesystem/bd/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/features/filesystem/fat/ChaN/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/rtx4/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/rtx5/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/rtx5/Include/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/rtx5/RTX/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/rtx5/Source/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/rtx5/RTX/Config/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/rtx5/RTX/Include/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/TARGET_CORTEX/rtx5/RTX/Source/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/cmsis/TARGET_CORTEX_M/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/cmsis/TARGET_CORTEX_M/TOOLCHAIN_GCC/

#Include paths for the RTOS library in mbed
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/rtos/

INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/features/mbedtls/inc/
INCLUDE_PATHS += -I$(SRCBASE)/$(MBED_OS)/features/mbedtls/

export INCLUDE_PATHS

LIBRARY_PATHS =  -L$(SRCBASE)/$(MBED_OS)/BUILD/libraries/mbedOS/K64F/GCC_ARM/
LINKER_SCRIPT =  $(SRCBASE)/$(MBED_OS)/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/TARGET_MCU_K64F/device/TOOLCHAIN_GCC_ARM/MK64FN1M0xxx12.ldo
LINKER_SCRIPT_INPUT = $(SRCBASE)/$(MBED_OS)/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/TARGET_MCU_K64F/device/TOOLCHAIN_GCC_ARM/MK64FN1M0xxx12.ld
STATIC_LIBRARIES = $(SRCBASE)/$(MBED_OS)/BUILD/libraries/mbedOS/K64F/GCC_ARM/libmbedOS.a
export STATIC_LIBRARIES


# Objects and Paths
###############################################################################
# Tools and Flags

export AS      = $(GCC_BIN)arm-none-eabi-as
export CC      = $(GCC_BIN)arm-none-eabi-gcc
export CPP     = $(GCC_BIN)arm-none-eabi-g++
export LD      = $(GCC_BIN)arm-none-eabi-gcc
export OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy
export OBJDUMP = $(GCC_BIN)arm-none-eabi-objdump
export SIZE    = $(GCC_BIN)arm-none-eabi-size
export RANLIB  = $(GCC_BIN)arm-none-eabi-ranlib
export AR      = $(GCC_BIN)arm-none-eabi-ar
export PREPRO  = $(GCC_BIN)arm-none-eabi-cpp

ifeq ($(HARDFP), 1)
	FLOAT_ABI = hard
else
	FLOAT_ABI = softfp
endif
export FLOAT_ABI

export CPU = -mcpu=cortex-m4 -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=$(FLOAT_ABI)
export CC_SYMBOLS = -DGIT_TAG=\"$(GIT_TAG)\" -DGIT_VERSION=\"$(GIT_VERSION)\" -DBUILD_TIMESTAMP=$(BUILD_TIMESTAMP) -DTARGET_KPSDK_MCUS -DTARGET_FF_ARDUINO -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -DCPU_MK64FN1M0VMD12 -DTARGET_FRDM -DTARGET_CORTEX_M -D__FPU_PRESENT=1 -DTARGET_KPSDK_CODE -DTARGET_M4 -D__MBED__=1 -DTARGET_K64F -DTARGET_Freescale -D__CORTEX_M4 -DFSL_RTOS_MBED -DTARGET_MCU_K64F -DARM_MATH_CM4 -DMBED_BUILD_TIMESTAMP=1446461242.95
export LD_FLAGS = $(CPU) -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float -Wl,--wrap,main -Wl,-Map=$(PROJECT).map,--cref
export LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys

CC_FLAGS += $(CPU)
CC_FLAGS += -c
CC_FLAGS += -g3
CC_FLAGS += -Wall
CC_FLAGS += -Wextra
CC_FLAGS += -Os
CC_FLAGS += -MMD
CC_FLAGS += -MP
CC_FLAGS += -fno-common
CC_FLAGS += -fmessage-length=0
CC_FLAGS += -fno-exceptions
CC_FLAGS += -ffunction-sections
CC_FLAGS += -fdata-sections
CC_FLAGS += -fomit-frame-pointer

CC_FLAGS += -fno-rtti
CC_FLAGS += -Wvla
CC_FLAGS += -DFEATURE_LWIP=1
CC_FLAGS += -D__MBED__=1
CC_FLAGS += -DDEVICE_I2CSLAVE=1
CC_FLAGS += -D__FPU_PRESENT=1
CC_FLAGS += -DTARGET_Freescale
CC_FLAGS += -DDEVICE_PORTINOUT=1
CC_FLAGS += -DTARGET_RTOS_M4_M7
CC_FLAGS += -DDEVICE_LOWPOWERTIMER=1
CC_FLAGS += -DDEVICE_RTC=1
CC_FLAGS += -DTOOLCHAIN_object
CC_FLAGS += -DDEVICE_SERIAL_ASYNCH=1
CC_FLAGS += -D__CMSIS_RTOS
CC_FLAGS += -DFSL_RTOS_MBED
CC_FLAGS += -DDEVICE_STORAGE=1
CC_FLAGS += -DTARGET_KPSDK_MCUS
CC_FLAGS += -DTOOLCHAIN_GCC
#CC_FLAGS += -DMBED_BUILD_TIMESTAMP=1500152519.76
CC_FLAGS += -DTARGET_CORTEX_M
CC_FLAGS += -DTARGET_KSDK2_MCUS
CC_FLAGS += -DTARGET_LIKE_CORTEX_M4
CC_FLAGS += -DDEVICE_ANALOGOUT=1
CC_FLAGS += -DTARGET_M4
CC_FLAGS += -DTARGET_UVISOR_UNSUPPORTED
CC_FLAGS += -DTARGET_K64F
CC_FLAGS += -DDEVICE_SPI_ASYNCH=1
CC_FLAGS += -DDEVICE_PWMOUT=1
CC_FLAGS += -DDEVICE_INTERRUPTIN=1
CC_FLAGS += -DDEVICE_I2C=1
CC_FLAGS += -DDEVICE_PORTOUT=1
CC_FLAGS += -D__CORTEX_M4
CC_FLAGS += -DDEVICE_STDIO_MESSAGES=1
CC_FLAGS += -DCPU_MK64FN1M0VMD12
CC_FLAGS += -DTARGET_LIKE_MBED
CC_FLAGS += -DTARGET_FF_ARDUINO
CC_FLAGS += -DTARGET_KPSDK_CODE
CC_FLAGS += -DTARGET_RELEASE
CC_FLAGS += -DDEVICE_SERIAL_FC=1
CC_FLAGS += -DFEATURE_STORAGE=1
CC_FLAGS += -DDEVICE_TRNG=1
CC_FLAGS += -D__MBED_CMSIS_RTOS_CM
CC_FLAGS += -DDEVICE_SLEEP=1
CC_FLAGS += -DTOOLCHAIN_GCC_ARM
CC_FLAGS += -DTARGET_FRDM
CC_FLAGS += -DTARGET_MCUXpresso_MCUS
CC_FLAGS += -DDEVICE_SPI=1
CC_FLAGS += -DDEVICE_ERROR_RED=1
CC_FLAGS += -DDEVICE_SPISLAVE=1
CC_FLAGS += -DDEVICE_ANALOGIN=1
CC_FLAGS += -DDEVICE_SERIAL=1
CC_FLAGS += -DDEVICE_PORTIN=1
CC_FLAGS += -DTARGET_MCU_K64F
CC_FLAGS += -DARM_MATH_CM4
CC_FLAGS += -include
CC_FLAGS += mbed_config.h
CC_FLAGS += -Wno-unused-parameter

DEBUG = 1
ifeq ($(DEBUG), 1)
	CC_FLAGS += -DDEBUG -O0
else
	CC_FLAGS += -DNDEBUG -Os
endif

export CC_FLAGS
#Is for the mbedtls libraries.
export CFLAGS = $(CC_FLAGS)

# Tools and Flags
###############################################################################
# Rules

.PHONY: clean lst size

all: $(PROJECT).bin $(PROJECT).hex size

clean:
	rm -f $(PROJECT).bin $(PROJECT).elf $(PROJECT).hex $(PROJECT).map $(PROJECT).lst $(OBJECTS) $(DEPS)
#	make -C examples clean

.asm.o:
	$(CC) $(CPU) -c -x assembler-with-cpp -o $@ $<
.s.o:
	$(CC) $(CPU) -c -x assembler-with-cpp -o $@ $<
.S.o:
	$(CC) $(CPU) -c -x assembler-with-cpp -o $@ $<

.c.o:
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

.cpp.o:
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++11 -fno-rtti $(INCLUDE_PATHS) -o $@ $<

$(LINKER_SCRIPT): $(LINKER_SCRIPT_INPUT)
	$(PREPRO) -P $< > $@

$(PROJECT).elf: $(OBJECTS) $(LINKER_SCRIPT) $(STATIC_LIBRARIES)
	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $(OBJECTS) $(LIBRARIES) $(STATIC_LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(STATIC_LIBRARIES) $(LD_SYS_LIBS)

$(PROJECT).bin: $(PROJECT).elf
	$(OBJCOPY) -O binary $< $@

$(PROJECT).hex: $(PROJECT).elf
	@$(OBJCOPY) -O ihex $< $@

$(PROJECT).lst: $(PROJECT).elf
	@$(OBJDUMP) -Sdh $< > $@

lst: $(PROJECT).lst

size: $(PROJECT).elf
	$(SIZE) $(PROJECT).elf


# Rules
###############################################################################
# Dependencies

DEPS = $(OBJECTS:.o=.d)
-include $(DEPS)

# Dependencies
###############################################################################

